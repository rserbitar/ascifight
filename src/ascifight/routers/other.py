import os
from pathlib import Path

from fastapi import APIRouter, Response
from starlette.responses import FileResponse

import ascifight.config as config
import ascifight.globals as globals
import ascifight.draw as draw
import ascifight.board.actions as asci_actions

router = APIRouter()


@router.get("/log_files", tags=["logistics"])
async def get_log_files() -> list[str]:
    """This service  fetches a sit of available log files.
    'game.log' is always the log file of the current game. Others get a number
    attached.

    The log files itself can be fetched using the '/logs/[filename]' endpoint."""
    return os.listdir(config.config["server"]["log_dir"])


@router.get(
    "/game_map",
    tags=["logistics"],
    # Set what the media type will be in the autogenerated OpenAPI specification.
    # fastapi.tiangolo.com/advanced/additional-responses/
    # additional-media-types-for-the-main-response
    responses={200: {"content": {"image/png": {}}}},
    # Prevent FastAPI from adding "application/json" as an additional
    # response media type in the autogenerated OpenAPI specification.
    # https://github.com/tiangolo/fastapi/issues/3258
    response_class=Response,
)
def get_game_map() -> Response:
    """Returns a png image of the current state of the game."""
    actions = globals.my_game.log[globals.my_game.tick]
    attack_actions = [
        action for action in actions if isinstance(action, asci_actions.AttackAction)
    ]
    image = draw.draw_game_map(globals.my_game.board, attack_actions)
    return Response(content=image, media_type="image/png")


@router.get("/status_page", tags=["web-page"])
async def read_index():
    "Show a web page displaying the latest game map."
    path = Path(__file__).parent / "../templates/index.html"
    return FileResponse(path)
